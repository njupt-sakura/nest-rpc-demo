// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'order';

export interface OrderById {
  id: number;
}

export interface Order {
  id: number;
  price: number;
}

export interface OrderWithItemInfo {
  id: number;
  price: number;
  item: OrderWithItemInfo_Item | undefined;
}

export interface OrderWithItemInfo_Item {
  id: number;
  name: string;
}

export const ORDER_PACKAGE_NAME = 'order';

export interface OrderServiceClient {
  findOne(request: OrderById): Observable<Order>;

  findOneWithItem(request: OrderById): Observable<OrderWithItemInfo>;
}

export interface OrderServiceController {
  findOne(request: OrderById): Promise<Order> | Observable<Order> | Order;

  findOneWithItem(
    request: OrderById,
  ):
    | Promise<OrderWithItemInfo>
    | Observable<OrderWithItemInfo>
    | OrderWithItemInfo;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['findOne', 'findOneWithItem'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ORDER_SERVICE_NAME = 'OrderService';
